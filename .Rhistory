#comment this and there is no green and the white is magenta(green is extracted)
rs.m[,,2] = layer.m
### Black
#comment the whole thing, and blue is completely extracted
if(doShow) {
#comment this and the green becomes cyan
layer.m = array(0, dim(m));
#comment this and the white becomes yellow
layer.m[isZero] = 1;
#comment this and same effect as above
rs.m[,,3] = layer.m
}
#don't comment this ;-;
rs.m = as.raster(rs.m)
return(rs.m);
}
#############
#############
#############
#############
#############
#############
################
################
#nothing except the flood functions seems to be interfering with the graph
### Examples
dims = c(30, 30)
p = 0.3
m = sample(c(-1, 0), prod(dims), replace=T, prob=c(p, 1-p))
m = matrix(m, nrow=dims[1])
#m[1:10, 1:10]
m = flood.all(m)
#m[1:10, 1:10]
table(m)
table(m[,dims[2]])
### Shortest Path
path.m = length.path(m)
id = dim(path.m)[2];
path.m[1:10, seq(id - 10, id)]
table(path.m[,dims[2]])
### Raster
rs.m = toRaster(path.m);
#palette(terrain.colors(255))
palette(rainbow(255))
plot(rs.m)
#############
#############
#############
#############
#############
#############
?selectInput
shiny::runApp('Test')
runApp('Test')
rnorm(15,,7)
min(runif(10))
min(runif(10))
runif(10)
mean(2)
N=function(repeats)
{v=rep(0,repeats)
for(i in 1:repeats)
{
sum=0
min=0
while(sum<=1)
{nr=runif(1)
sum=sum+nr
min=min+1
}
v[i]=min
}
return(mean(v))
}
N(1000)
library(shiny); runApp('C:/Users/NitrousOxide/Desktop/Faculty/Year 2, Sem2/Team Project/Epidemic/Shiny_Prototype.R')
runApp('C:/Users/NitrousOxide/Desktop/Faculty/Year 2, Sem2/Team Project/Epidemic/ShinyAppsDemo.R')
runApp('C:/Users/NitrousOxide/Desktop/Faculty/Year 2, Sem2/Team Project/Epidemic/ShinyAppsDemo.R')
runApp('C:/Users/NitrousOxide/Desktop/Faculty/Year 2, Sem2/Team Project/Epidemic/ShinyAppsDemo.R')
initSIR_Death_Comparison = function(infect = 1.4247 / 4,recov  = 0.14286 / c(1.2, 1.3),death = recov * c(1/10, 1/2),hosp = 0.1,vacc = 1 / 1000,vacc_seq= seq(1, 60, by=10))
{
parameters = c(infect = infect,
recov = recov[1], recov.h = recov[2],
death=death[1], death.h = death[2], hosp = hosp, vacc = vacc)
init = c(S = 1-1e-6, I = 1e-6, R = 0.0, D = 0.0, H = 0.0, V = 0.0)
### Solve using ode
out = solve.sir(SIR_Death_Comparison, init, parameters, times)
head(out, 10)
solve.SIR = function(param, type="vacc") {
type = match(type, c("infect", "recov", "death", "hosp", "vacc"))
if(is.na(type)) stop("Invalid type!")
parameters[type] = param
solve.sir(SIR_Death_Comparison, init, parameters, times)$D;
}
vacc.seq = vacc * vacc_seq
out = sapply(vacc.seq, solve.SIR, type="vacc")
plot.sir(out, times, ylab="Mortality",
legend.lbl=paste("Vaccination", vacc.seq), legend.xy=c(15,3/4*max(out$D)))
#plot.sir(out, times, ylab="Mortality",legend.lbl=paste("Vaccination", death.seq), legend.xy=c(0,1))
}
runApp('C:/Users/NitrousOxide/Desktop/Faculty/Year 2, Sem2/Team Project/Epidemic/ShinyAppsDemo.R')
View(out)
plot.sir(out, times, ylab="Mortality",
legend.lbl=paste("Vaccination", vacc.seq), legend.xy=c(15,3/4*max(out)))
plot.sir(out, times, ylab="Mortality",
legend.lbl=paste("Vaccination", vacc.seq), legend.xy=c(15,3/4*max(out)))
plot.sir(out, times, ylab="Mortality",
legend.lbl=paste("Vaccination", vacc.seq), legend.xy=c(15,3/4*max(out)))
initSIR_Death_Comparison = function(infect = 1.4247 / 4,recov  = 0.14286 / c(1.2, 1.3),death = recov * c(1/10, 1/2),hosp = 0.1,vacc = 1 / 1000,vacc_seq= seq(1, 60, by=10))
{
parameters = c(infect = infect,
recov = recov[1], recov.h = recov[2],
death=death[1], death.h = death[2], hosp = hosp, vacc = vacc)
init = c(S = 1-1e-6, I = 1e-6, R = 0.0, D = 0.0, H = 0.0, V = 0.0)
### Solve using ode
out = solve.sir(SIR_Death_Comparison, init, parameters, times)
head(out, 10)
solve.SIR = function(param, type="vacc") {
type = match(type, c("infect", "recov", "death", "hosp", "vacc"))
if(is.na(type)) stop("Invalid type!")
parameters[type] = param
solve.sir(SIR_Death_Comparison, init, parameters, times)$D;
}
vacc.seq = vacc * vacc_seq
out = sapply(vacc.seq, solve.SIR, type="vacc")
plot.sir(out, times, ylab="Mortality",
legend.lbl=paste("Vaccination", vacc.seq), legend.xy=c(15,3/4*max(out)))
#plot.sir(out, times, ylab="Mortality",legend.lbl=paste("Vaccination", death.seq), legend.xy=c(0,1))
}
runApp('C:/Users/NitrousOxide/Desktop/Faculty/Year 2, Sem2/Team Project/Epidemic/ShinyAppsDemo.R')
initSIR_Death_Comparison = function(infect = 1.4247 / 4,recov  = 0.14286 / c(1.2, 1.3),death = recov * c(1/10, 1/2),hosp = 0.1,vacc = 1 / 1000,vacc_seq= seq(1, 60, by=10))
{
parameters = c(infect = infect,
recov = recov[1], recov.h = recov[2],
death=death[1], death.h = death[2], hosp = hosp, vacc = vacc)
init = c(S = 1-1e-6, I = 1e-6, R = 0.0, D = 0.0, H = 0.0, V = 0.0)
### Solve using ode
out = solve.sir(SIR_Death_Comparison, init, parameters, times)
head(out, 10)
solve.SIR = function(param, type="vacc") {
type = match(type, c("infect", "recov", "death", "hosp", "vacc"))
if(is.na(type)) stop("Invalid type!")
parameters[type] = param
solve.sir(SIR_Death_Comparison, init, parameters, times)$D;
}
vacc.seq = vacc * vacc_seq
out = sapply(vacc.seq, solve.SIR, type="vacc")
plot.sir(out, times, ylab="Mortality",
legend.lbl=paste("Vaccination", vacc.seq), legend.xy=c(15,3/4*max(out)))
#plot.sir(out, times, ylab="Mortality",legend.lbl=paste("Vaccination", death.seq), legend.xy=c(0,1))
}
initSIR_Death_Comparison = function(infect = 1.4247 / 4,recov  = 0.14286 / c(1.2, 1.3),death = recov * c(1/10, 1/2),hosp = 0.1,vacc = 1 / 1000,vacc_seq= seq(1, 60, by=10))
{
parameters = c(infect = infect,
recov = recov[1], recov.h = recov[2],
death=death[1], death.h = death[2], hosp = hosp, vacc = vacc)
init = c(S = 1-1e-6, I = 1e-6, R = 0.0, D = 0.0, H = 0.0, V = 0.0)
### Solve using ode
out = solve.sir(SIR_Death_Comparison, init, parameters, times)
head(out, 10)
#TODO select parameter
#output type
solve.SIR = function(param, type="vacc", output="D") {
type = match(type, c("infect", "recov", "death", "hosp", "vacc"))
if(is.na(type)) stop("Invalid type!")
parameters[type] = param
solve.sir(SIR_Death_Comparison, init, parameters, times)[,output];
}
vacc.seq = vacc * vacc_seq
out = sapply(vacc.seq, solve.SIR, type="vacc")
plot.sir(out, times, ylab="Mortality",
legend.lbl=paste("Vaccination", vacc.seq), legend.xy=c(15,3/4*max(out)))
#plot.sir(out, times, ylab="Mortality",legend.lbl=paste("Vaccination", death.seq), legend.xy=c(0,1))
}
runApp('C:/Users/NitrousOxide/Desktop/Faculty/Year 2, Sem2/Team Project/Epidemic/ShinyAppsDemo.R')
initSIR_Death_Comparison = function(infect = 1.4247 / 4,recov  = 0.14286 / c(1.2, 1.3),death = recov * c(1/10, 1/2),hosp = 0.1,vacc = 1 / 1000,vacc_seq= seq(1, 60, by=10))
{
parameters = c(infect = infect,
recov = recov[1], recov.h = recov[2],
death=death[1], death.h = death[2], hosp = hosp, vacc = vacc)
init = c(S = 1-1e-6, I = 1e-6, R = 0.0, D = 0.0, H = 0.0, V = 0.0)
### Solve using ode
out = solve.sir(SIR_Death_Comparison, init, parameters, times)
head(out, 10)
#TODO select parameter
#output type to init
solve.SIR = function(param, type="vacc", output="D") {
type = match(type, c("infect", "recov", "death", "hosp", "vacc"))
if(is.na(type)) stop("Invalid type!")
parameters[type] = param
solve.sir(SIR_Death_Comparison, init, parameters, times)[,output];
}
vacc.seq = vacc * vacc_seq
out = sapply(vacc.seq, solve.SIR, type="vacc")
plot.sir(out, times, ylab="Mortality",
legend.lbl=paste("Vaccination", vacc.seq), legend.xy=c(15,3/4*max(out)),ylim=c(0,0.4))
#plot.sir(out, times, ylab="Mortality",legend.lbl=paste("Vaccination", death.seq), legend.xy=c(0,1))
}
plot.sir = function(y, times, legend.lbl=c("Susceptible", "Infected", "Recovered"),
legend.xy, leg.off=c(0,0), ylab="Susceptible and Recovered",...) {
if(missing(legend.xy)) legend.xy=legend.xyf(times, leg.off)
matplot(x = times, y = y, type = "l",
xlab = "Time", ylab = ylab, main = "SIR Model",
lwd = 1, lty = 1, bty = "l", col = 2:10,...)
## Add legend
legend(legend.xy[1], legend.xy[2], legend.lbl,
pch = 1, col = 2:10, bty = "n")
}
initSIR_Death_Comparison = function(infect = 1.4247 / 4,recov  = 0.14286 / c(1.2, 1.3),death = recov * c(1/10, 1/2),hosp = 0.1,vacc = 1 / 1000,vacc_seq= seq(1, 60, by=10))
{
parameters = c(infect = infect,
recov = recov[1], recov.h = recov[2],
death=death[1], death.h = death[2], hosp = hosp, vacc = vacc)
init = c(S = 1-1e-6, I = 1e-6, R = 0.0, D = 0.0, H = 0.0, V = 0.0)
### Solve using ode
out = solve.sir(SIR_Death_Comparison, init, parameters, times)
head(out, 10)
#TODO select parameter
#output type to init
solve.SIR = function(param, type="vacc", output="D") {
type = match(type, c("infect", "recov", "death", "hosp", "vacc"))
if(is.na(type)) stop("Invalid type!")
parameters[type] = param
solve.sir(SIR_Death_Comparison, init, parameters, times)[,output];
}
vacc.seq = vacc * vacc_seq
out = sapply(vacc.seq, solve.SIR, type="vacc")
plot.sir(out, times, ylab="Mortality",
legend.lbl=paste("Vaccination", vacc.seq), legend.xy=c(15,3/4*max(out)),ylim=c(0,0.4))
#plot.sir(out, times, ylab="Mortality",legend.lbl=paste("Vaccination", death.seq), legend.xy=c(0,1))
}
runApp('C:/Users/NitrousOxide/Desktop/Faculty/Year 2, Sem2/Team Project/Epidemic/ShinyAppsDemo.R')
initSIR_Death_Comparison = function(infect = 1.4247 / 4,recov  = 0.14286 / c(1.2, 1.3),death = recov * c(1/10, 1/2),hosp = 0.1,vacc = 1 / 1000,vacc_seq= seq(1, 60, by=10))
{
plot.sir = function(y, times, legend.lbl=c("Susceptible", "Infected", "Recovered"),
legend.xy, leg.off=c(0,0), ylab="Susceptible and Recovered",...) {
if(missing(legend.xy)) legend.xy=legend.xyf(times, leg.off)
matplot(x = times, y = y, type = "l",
xlab = "Time", ylab = ylab, main = "SIR Model",
lwd = 1, lty = 1, bty = "l", col = 2:10,...)
## Add legend
legend(legend.xy[1], legend.xy[2], legend.lbl,
pch = 1, col = 2:10, bty = "n")
}
parameters = c(infect = infect,
recov = recov[1], recov.h = recov[2],
death=death[1], death.h = death[2], hosp = hosp, vacc = vacc)
init = c(S = 1-1e-6, I = 1e-6, R = 0.0, D = 0.0, H = 0.0, V = 0.0)
### Solve using ode
out = solve.sir(SIR_Death_Comparison, init, parameters, times)
head(out, 10)
#TODO select parameter
#output type to init
solve.SIR = function(param, type="vacc", output="D") {
type = match(type, c("infect", "recov", "death", "hosp", "vacc"))
if(is.na(type)) stop("Invalid type!")
parameters[type] = param
solve.sir(SIR_Death_Comparison, init, parameters, times)[,output];
}
vacc.seq = vacc * vacc_seq
out = sapply(vacc.seq, solve.SIR, type="vacc")
plot.sir(out, times, ylab="Mortality",
legend.lbl=paste("Vaccination", vacc.seq), legend.xy=c(15,3/4*max(out)),ylim=c(0,0.4))
#plot.sir(out, times, ylab="Mortality",legend.lbl=paste("Vaccination", death.seq), legend.xy=c(0,1))
}
runApp('C:/Users/NitrousOxide/Desktop/Faculty/Year 2, Sem2/Team Project/Epidemic/ShinyAppsDemo.R')
plot.sir = function(y, times, legend.lbl=c("Susceptible", "Infected", "Recovered"),
legend.xy, leg.off=c(0,0), ylab="Susceptible and Recovered",ylim=NULL) {
if(missing(legend.xy)) legend.xy=legend.xyf(times, leg.off)
matplot(x = times, y = y, type = "l",
xlab = "Time", ylab = ylab, main = "SIR Model",
lwd = 1, lty = 1, bty = "l", col = 2:10,ylim)
## Add legend
legend(legend.xy[1], legend.xy[2], legend.lbl,
pch = 1, col = 2:10, bty = "n")
}
initSIR_Death_Comparison = function(infect = 1.4247 / 4,recov  = 0.14286 / c(1.2, 1.3),death = recov * c(1/10, 1/2),hosp = 0.1,vacc = 1 / 1000,vacc_seq= seq(1, 60, by=10))
{
# TODO
# If ylim exists, fix the legend, otherwise make the legend dynamic(moves with graph)
#
plot.sir = function(y, times, legend.lbl=c("Susceptible", "Infected", "Recovered"),
legend.xy, leg.off=c(0,0), ylab="Susceptible and Recovered",ylim=NULL) {
if(missing(legend.xy)) legend.xy=legend.xyf(times, leg.off)
matplot(x = times, y = y, type = "l",
xlab = "Time", ylab = ylab, main = "SIR Model",
lwd = 1, lty = 1, bty = "l", col = 2:10,ylim)
## Add legend
legend(legend.xy[1], legend.xy[2], legend.lbl,
pch = 1, col = 2:10, bty = "n")
}
parameters = c(infect = infect,
recov = recov[1], recov.h = recov[2],
death=death[1], death.h = death[2], hosp = hosp, vacc = vacc)
init = c(S = 1-1e-6, I = 1e-6, R = 0.0, D = 0.0, H = 0.0, V = 0.0)
### Solve using ode
out = solve.sir(SIR_Death_Comparison, init, parameters, times)
head(out, 10)
#TODO select parameter
#output type to init
solve.SIR = function(param, type="vacc", output="D") {
type = match(type, c("infect", "recov", "death", "hosp", "vacc"))
if(is.na(type)) stop("Invalid type!")
parameters[type] = param
solve.sir(SIR_Death_Comparison, init, parameters, times)[,output];
}
vacc.seq = vacc * vacc_seq
out = sapply(vacc.seq, solve.SIR, type="vacc")
# If ylim is sent, fix legend, if not
plot.sir(out, times, ylab="Mortality",
legend.lbl=paste("Vaccination", vacc.seq), legend.xy=c(15,3/4*max(out)),ylim=c(0,0.4))
#plot.sir(out, times, ylab="Mortality",legend.lbl=paste("Vaccination", death.seq), legend.xy=c(0,1))
}
runApp('C:/Users/NitrousOxide/Desktop/Faculty/Year 2, Sem2/Team Project/Epidemic/ShinyAppsDemo.R')
list(x=1, y=2)[1]
list(x=1, y=2)[[1]]
list()
z=list(x=1, y=2)
z
z1=list(c(0,1),c(2,3))
z1
co1=cov(inc,incR)
users = c(17.2, 22.1, 18.5, 17.2, 18.6, 14.8, 21.7, 15.8, 16.3, 22.8,
24.1, 13.3, 16.2, 17.5, 19.0, 23.9, 14.8, 22.2, 21.7, 20.7,
13.5, 15.8, 13.1, 16.1, 21.9, 23.9, 19.3, 12.0, 19.9, 19.4,
15.4, 16.7, 19.5, 16.2, 16.9, 17.1, 20.2, 13.4, 19.8, 17.7,
19.7, 18.7, 17.6, 15.9, 15.2, 17.1, 15.0, 18.8, 21.6, 11.9)
mean(users)
var(users)
sd(users)
sd(users)/sqrt(length(users))
summary(users)
quantile(users)
hist(users)
boxplot(users)
#8.5
pops=c(3.9, 5.3, 7.2, 9.6, 12.9, 17.1, 23.2, 31.4, 38.6, 50.2, 63.0, 76.2,92.2, 106.0, 123.2, 132.2, 151.3, 179.3, 203.3, 226.5, 248.7, 281.4, 308.7)
years=c(1790, 1800, 1810, 1820, 1830, 1840, 1850, 1860, 1870, 1880, 1890, 1900,1910 ,1920 ,1930 ,1940, 1950, 1960, 1970, 1980, 1990, 2000, 2010)
#looks like the graph of sqrt(x) if pops by are at the bottom, and x^2 if years at the bottom
#the rate of growth is diminishing
plot(years,pops)
#8.6
inc=rep(0,length(pops)-1)
for(i in 2:length(pops))
{
inc[i-1]=pops[i]-pops[i-1]
}
mean(inc)
median(inc)
var(inc)
#slowly rising, with some hiccups especially around the end, near the world wars
plot(years[2:length(years)],inc)
#8.7
incR=rep(0,length(pops)-1)
for(i in 2:length(pops))
{
incR[i-1]=(pops[i]-pops[i-1])/pops[i-1]
}
mean(incR)
median(incR)
var(incR)
#Growth slowly decreases
plot(years[2:length(years)],incR)
#how do i interpret this?
s12=sd(inc)*sd(incR)
#the further time advances, the lower the growth gets, maybe it will reach and equilibrium?
co1=cov(inc,incR)
co1/s12
#8.8
#seems about symmetric
ds1=c(19, 24, 12, 19, 18, 24, 8, 5, 9, 20, 13, 11, 1, 12, 11, 10, 22, 21, 7, 16, 15, 15, 26, 16, 1,
13, 21, 21, 20, 19)
#left skewed? symmetric?
ds2=c(17, 24, 21, 22, 26, 22, 19, 21, 23, 11, 19, 14, 23, 25, 26, 15, 17, 26, 21, 18, 19, 21, 24,
18, 16, 20, 21, 20, 23, 33)
#left skewed
ds3=c(56, 52, 13, 34, 33, 18, 44, 41, 48, 75, 24, 19, 35, 27, 46, 62, 71, 24, 66, 94, 40, 18, 15,
39, 53, 23, 41, 78, 15, 35)
hist(ds1)
hist(ds2)
hist(ds3)
v1=c(mean(ds1),median(ds1))
v2=c(mean(ds2),median(ds2))
v3=c(mean(ds3),median(ds3))
v1
v2
v3
hist(ds1)
hist(ds2,breaks="scott")
hist(ds3,breaks="fd")
hist(ds3,breaks="fd")
hist(ds3,breaks="scott")
hist(ds3)
min(ds3)
max(ds3)
hist(ds3,breaks=c(10:100))
hist(ds3,breaks=seq(10:100,by=5))
hist(ds3,breaks=seq(10,100,by=5))
hist(ds3,breaks=seq(10,100,by=50))
hist(ds3,breaks=seq(10,100,by=49))
hist(ds3,breaks=seq(10,100,by=45))
hist(ds3,breaks=seq(10,100,by=30))
hist(ds3,breaks=seq(10,100,by=15))
hist(ds3,breaks=seq(10,100,by=6))
d474=c(43, 37, 50, 51, 58, 105, 52, 45, 45, 10)
mean(d474)
median(d474)
sd(d474)
IQR(d474)*1.5
quartile(d474)
d474=c(43, 37, 50, 51, 58, 105, 52, 45, 45, 10)
mean(d474)
median(d474)
sd(d474)
IQR(d474)*1.5
quantile(d474)
data2=c(43, 37, 50, 51, 58, 105, 52, 45, 45)
mean(data2)
median(data2)
sd(data2)
quantile(data2)
data2=c(43, 37, 50, 51, 58, 52, 45, 45)
mean(data2)
median(data2)
sd(data2)
quantile(data2)
library(shiny); runApp('C:/Users/NitrousOxide/Desktop/Faculty/Year 2, Sem2/Team Project/Third Attempt/Pandemic-Simulation/ShinyAppsDemo.R')
runApp('C:/Users/NitrousOxide/Desktop/Faculty/Year 2, Sem2/Team Project/Third Attempt/Pandemic-Simulation/ShinyAppsDemo.R')
runApp('C:/Users/NitrousOxide/Desktop/Faculty/Year 2, Sem2/Team Project/Third Attempt/Pandemic-Simulation/ShinyAppsDemo.R')
runApp('C:/Users/NitrousOxide/Desktop/Faculty/Year 2, Sem2/Team Project/Third Attempt/Pandemic-Simulation/ShinyAppsDemo.R')
runApp('C:/Users/NitrousOxide/Desktop/Faculty/Year 2, Sem2/Team Project/Third Attempt/Pandemic-Simulation/ShinyAppsDemo.R')
runApp('C:/Users/NitrousOxide/Desktop/Faculty/Year 2, Sem2/Team Project/Third Attempt/Pandemic-Simulation/ShinyAppsDemo.R')
runApp('C:/Users/NitrousOxide/Desktop/Faculty/Year 2, Sem2/Team Project/Third Attempt/Pandemic-Simulation/ShinyAppsDemo.R')
runApp('C:/Users/NitrousOxide/Desktop/Faculty/Year 2, Sem2/Team Project/Third Attempt/Pandemic-Simulation/ShinyAppsDemo.R')
runApp('C:/Users/NitrousOxide/Desktop/Faculty/Year 2, Sem2/Team Project/Third Attempt/Pandemic-Simulation/ShinyAppsDemo.R')
install.packages(shinyjs)
install.packages(Shinyjs)
install.packages("Shinyjs")
install.packages("shinyjs")
runApp('C:/Users/NitrousOxide/Desktop/Faculty/Year 2, Sem2/Team Project/Third Attempt/Pandemic-Simulation/ShinyAppsDemo.R')
runApp('C:/Users/NitrousOxide/Desktop/Faculty/Year 2, Sem2/Team Project/Third Attempt/Pandemic-Simulation/ShinyAppsDemo.R')
runApp('C:/Users/NitrousOxide/Desktop/Faculty/Year 2, Sem2/Team Project/Third Attempt/Pandemic-Simulation/ShinyAppsDemo.R')
runApp('C:/Users/NitrousOxide/Desktop/Faculty/Year 2, Sem2/Team Project/Third Attempt/Pandemic-Simulation/ShinyAppsDemo.R')
runApp('C:/Users/NitrousOxide/Desktop/Faculty/Year 2, Sem2/Team Project/Third Attempt/Pandemic-Simulation/ShinyAppsDemo.R')
runApp('C:/Users/NitrousOxide/Desktop/Faculty/Year 2, Sem2/Team Project/Third Attempt/Pandemic-Simulation/ShinyAppsDemo.R')
runApp('C:/Users/NitrousOxide/Desktop/Faculty/Year 2, Sem2/Team Project/Third Attempt/Pandemic-Simulation/ShinyAppsDemo.R')
runApp('C:/Users/NitrousOxide/Desktop/Faculty/Year 2, Sem2/Team Project/Third Attempt/Pandemic-Simulation/ShinyAppsDemo.R')
runApp('C:/Users/NitrousOxide/Desktop/Faculty/Year 2, Sem2/Team Project/Third Attempt/Pandemic-Simulation/ShinyAppsDemo.R')
runApp('C:/Users/NitrousOxide/Desktop/Faculty/Year 2, Sem2/Team Project/Third Attempt/Pandemic-Simulation/ShinyAppsDemo.R')
runApp('C:/Users/NitrousOxide/Desktop/Faculty/Year 2, Sem2/Team Project/Third Attempt/Pandemic-Simulation/ShinyAppsDemo.R')
runApp('C:/Users/NitrousOxide/Desktop/Faculty/Year 2, Sem2/Team Project/Third Attempt/Pandemic-Simulation/ShinyAppsDemo.R')
runApp('C:/Users/NitrousOxide/Desktop/Faculty/Year 2, Sem2/Team Project/Third Attempt/Pandemic-Simulation/ShinyAppsDemo.R')
runApp('ShinyAppsDemo.R')
runApp('C:/Users/NitrousOxide/Desktop/Faculty/Year 2, Sem2/Team Project/Third Attempt/Pandemic-Simulation/ShinyAppsDemo.R')
runApp('ShinyAppsDemo.R')
runApp('C:/Users/NitrousOxide/Desktop/Faculty/Year 2, Sem2/Team Project/Third Attempt/Pandemic-Simulation/ShinyAppsDemo.R')
runApp('ShinyAppsDemo.R')
runApp('C:/Users/NitrousOxide/Desktop/Faculty/Year 2, Sem2/Team Project/Third Attempt/Pandemic-Simulation/ShinyAppsDemo.R')
runApp('C:/Users/NitrousOxide/Desktop/Faculty/Year 2, Sem2/Team Project/Third Attempt/Pandemic-Simulation/ShinyAppsDemo.R')
runApp('ShinyAppsDemo.R')
runApp('C:/Users/NitrousOxide/Desktop/Faculty/Year 2, Sem2/Team Project/Third Attempt/Pandemic-Simulation/ShinyAppsDemo.R')
runApp('ShinyAppsDemo.R')
runApp('C:/Users/NitrousOxide/Desktop/Faculty/Year 2, Sem2/Team Project/Third Attempt/Pandemic-Simulation/ShinyAppsDemo.R')
runApp('C:/Users/NitrousOxide/Desktop/Faculty/Year 2, Sem2/Team Project/Third Attempt/Pandemic-Simulation/ShinyAppsDemo.R')
runApp('ShinyAppsDemo.R')
runApp('C:/Users/NitrousOxide/Desktop/Faculty/Year 2, Sem2/Team Project/Third Attempt/Pandemic-Simulation/ShinyAppsDemo.R')
runApp('C:/Users/NitrousOxide/Desktop/Faculty/Year 2, Sem2/Team Project/Third Attempt/Pandemic-Simulation/ShinyAppsDemo.R')
runApp('ShinyAppsDemo.R')
runApp('C:/Users/NitrousOxide/Desktop/Faculty/Year 2, Sem2/Team Project/Third Attempt/Pandemic-Simulation/ShinyAppsDemo.R')
runApp('ShinyAppsDemo.R')
runApp('C:/Users/NitrousOxide/Desktop/Faculty/Year 2, Sem2/Team Project/Third Attempt/Pandemic-Simulation/ShinyAppsDemo.R')
runApp('ShinyAppsDemo.R')
runApp('C:/Users/NitrousOxide/Desktop/Faculty/Year 2, Sem2/Team Project/Third Attempt/Pandemic-Simulation/ShinyAppsDemo.R')
runApp('C:/Users/NitrousOxide/Desktop/Faculty/Year 2, Sem2/Team Project/Third Attempt/Pandemic-Simulation/ShinyAppsDemo.R')
runApp('C:/Users/NitrousOxide/Desktop/Faculty/Year 2, Sem2/Team Project/Third Attempt/Pandemic-Simulation/ShinyAppsDemo.R')
runApp('ShinyAppsDemo.R')
runApp('C:/Users/NitrousOxide/Desktop/Faculty/Year 2, Sem2/Team Project/Third Attempt/Pandemic-Simulation/ShinyAppsDemo.R')
runApp('C:/Users/NitrousOxide/Desktop/Faculty/Year 2, Sem2/Team Project/Third Attempt/Pandemic-Simulation/ShinyAppsDemo.R')
runApp('C:/Users/NitrousOxide/Desktop/Faculty/Year 2, Sem2/Team Project/Third Attempt/Pandemic-Simulation/ShinyAppsDemo.R')
View(sir)
runApp('C:/Users/NitrousOxide/Desktop/Faculty/Year 2, Sem2/Team Project/Third Attempt/Pandemic-Simulation/ShinyAppsDemo.R')
runApp('C:/Users/NitrousOxide/Desktop/Faculty/Year 2, Sem2/Team Project/Third Attempt/Pandemic-Simulation/ShinyAppsDemo.R')
runApp('C:/Users/NitrousOxide/Desktop/Faculty/Year 2, Sem2/Team Project/Third Attempt/Pandemic-Simulation/ShinyAppsDemo.R')
runApp('C:/Users/NitrousOxide/Desktop/Faculty/Year 2, Sem2/Team Project/Third Attempt/Pandemic-Simulation/ShinyAppsDemo.R')
runApp('C:/Users/NitrousOxide/Desktop/Faculty/Year 2, Sem2/Team Project/Third Attempt/Pandemic-Simulation/ShinyAppsDemo.R')
runApp('C:/Users/NitrousOxide/Desktop/Faculty/Year 2, Sem2/Team Project/Third Attempt/Pandemic-Simulation/ShinyAppsDemo.R')
rsconnect::setAccountInfo(name='konic2', token='030A502CF29EE2C1C43B261A12652CFA', secret='TjY4mwchP4HAE2qK57rW9x1+syM3VTT6dXQhMU2Z')
library(rsconnect)
rsconnect::deployApp("C:\Users\NitrousOxide\Desktop\Faculty\Year 2, Sem2\Team Project\Third Attempt\Pandemic-Simulation")
library(rsconnect)
rsconnect::deployApp("C:\Users\NitrousOxide\Desktop\Faculty\'Year 2, Sem2'\Team Project\Third Attempt\Pandemic-Simulation")
library(rsconnect)
rsconnect::deployApp('C:\Users\NitrousOxide\Desktop\Faculty\'Year 2, Sem2'\Team Project\Third Attempt\Pandemic-Simulation')
rsconnect::deployApp("C:\\Users\\NitrousOxide\\Desktop\\Faculty\'\Year 2, Sem2'\\Team Project\\Third Attempt\\Pandemic-Simulation")
rsconnect::deployApp("C:\\Users\\NitrousOxide\\Desktop\\Faculty\\`Year 2, Sem2'\\Team Project\\Third Attempt\\Pandemic-Simulation")
rsconnect::deployApp("C:\\Users\\NitrousOxide\\Desktop\\Faculty\\'Year 2, Sem2'\\Team Project\\Third Attempt\\Pandemic-Simulation")
rsconnect::deployApp("C:\\Users\\NitrousOxide\\Desktop\\Faculty\\Year 2, Sem2\\Team Project\\Third Attempt\\Pandemic-Simulation")
rsconnect::deployApp("C:\\Users\\NitrousOxide\\Desktop\\Faculty\\Year 2, Sem2\\Team Project\\Third Attempt\\Pandemic-Simulation\\ShinyAppsDemo.R")
rsconnect::deployApp(appFiles=c("ShinyAppsDemo","Beta_QM"))
rsconnect::deployApp("~",appFiles=c("ShinyAppsDemo","Beta_QM"))
getwd()
setwd("C:\Users\NitrousOxide\Desktop\Faculty\Year 2, Sem2\Team Project\Third Attempt\Pandemic-Simulation")
setwd("C:/Users/NitrousOxide/Desktop/Faculty/Year 2, Sem2/Team Project/Third Attempt/Pandemic-Simulation")
getwd()
rsconnect::deployApp("~",appFiles=c("ShinyAppsDemo","Beta_QM"))
rsconnect::deployApp(appFiles=c("ShinyAppsDemo","Beta_QM"))
getwd()
rsconnect::deployApp()
rsconnect::deployApp()
runApp('shiny.R')
runApp()
runApp()
